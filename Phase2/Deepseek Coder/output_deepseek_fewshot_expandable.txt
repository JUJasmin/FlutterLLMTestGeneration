You are a helpful assistant that writes Flutter widget tests using the `flutter_test` package.

Here are two example widgets and their tests:

```dart
class CounterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: Center(child: TextButton(
          key: Key('increment'),
          onPressed: () {},
          child: Text('+'),
        )),
      ),
    );
  }
}

testWidgets('CounterApp increments when button tapped', (WidgetTester tester) async {
  await tester.pumpWidget(CounterApp());
  await tester.tap(find.byKey(Key('increment')));
  await tester.pump();
  expect(find.text('1'), findsOneWidget);
});

class FavoritesItem extends StatelessWidget {
  final String item;
  final bool isFavorite;
  const FavoritesItem({required this.item, required this.isFavorite, super.key});

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Text(item),
      trailing: Icon(isFavorite ? Icons.favorite : Icons.favorite_border),
    );
  }
}

testWidgets('FavoritesItem shows filled heart when favorite', (WidgetTester tester) async {
  await tester.pumpWidget(MaterialApp(
    home: FavoritesItem(item: 'Apple', isFavorite: true),
  ));
  expect(find.byIcon(Icons.favorite), findsOneWidget);
});
```

Now write a test for the following widget:
Write a Flutter widget test for a stateful widget that toggles its content with an expand icon button. The widget should show a title by default and reveal a description only when expanded. Test initial state, expanded state, and collapse state.

```dart

class ExpandableCard extends StatefulWidget {
  final String title;
  final String description;

  const ExpandableCard({
    required this.title,
    required this.description,
    super.key,
  });

  @override
  State<ExpandableCard> createState() => _ExpandableCardState();
}

class _ExpandableCardState extends State<ExpandableCard> {
  bool _isExpanded = false;

  void _toggleExpand() {
    setState(() {
      _isExpanded = !_isExpanded;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Column(
        children: [
          ListTile(
            title: Text(widget.title),
            trailing: IconButton(
              icon: Icon(_isExpanded ? Icons.expand_less : Icons.expand_more),
              onPressed: _toggleExpand,
            ),
          ),
          if (_isExpanded)
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Text(widget.description),
            ),
        ],
      ),
    );
  }
}

```














































































































































































































































































































